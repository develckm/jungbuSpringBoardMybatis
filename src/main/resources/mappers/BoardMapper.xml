<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jungbu.mybatis_board.mapper.BoardMapper">
	<!-- dto 필드명과 db 칼럼명이 다를때 mapping 해준다.  -->
	<resultMap type="BoardDto" id="BoardMap">
		<id column="board_no" property="boardNo"/>
		<result column="post_time" property="postTime"/>
		<result column="user_id" property="userId"/>
		<result column="title" property="title"/>
		<result column="contents" property="contents"/>
		<result column="views" property="views"/>
		<result column="likes" property="likes"/>
		<result column="bads" property="bads"/>
		<association property="user" column="user_id" fetchType="lazy"
		select="com.jungbu.mybatis_board.mapper.UserMapper.detail"></association>
		
		<collection property="replyList" ofType="ReplyDto">
			<id column="reply_no" property="replyNo"/>
			<result column="r_title" property="title"/>
			<result column="r_contents" property="contents"/>
			<result column="r_user_id" property="userId"/>
			<result column="r_post_time" property="postTime"/>
			<result column="r_img_path" property="imgPath"/>
			<result column="r_likes" property="likes"/>
			<result column="r_bads" property="bads"/>
		</collection>
		<!-- collection.select : board 출력할때 select를 한번 더 호출(==join) -->
		<!-- fetchType="lazy"(게으른 연산) : toString,equals,get... 
								호출이 없으면 collection.select를 하지 않는다. -->
		<collection property="boardImgList"
			select="com.jungbu.mybatis_board.mapper.BoardImgMapper.list"
			column="board_no" fetchType="lazy">
		</collection>
	</resultMap>
	
	<select id="list" resultMap="BoardMap">
		SELECT * FROM BOARD 
	</select>
	<select id="listCount" resultType="int">
		SELECT COUNT(*) FROM BOARD
	</select>
	<select id="detail" resultMap="BoardMap">
		SELECT b.*,			
			(SELECT COUNT(*) FROM BOARD_PREFER f WHERE f.board_no=b.board_no AND prefer=1) likes,
			(SELECT COUNT(*) FROM BOARD_PREFER f WHERE f.board_no=b.board_no AND prefer=0) bads
			FROM BOARD b
			WHERE board_no=#{boardNo}
	</select>
	<select id="detailReplyPaging" resultMap="BoardMap">
		SELECT b.*,
			r.reply_no,
			r.title r_title,
			r.contents r_contents,
			r.post_time r_post_time,
			r.user_id r_user_id,
			r.img_path r_img_path,
			(SELECT COUNT(*) FROM REPLY_PREFER rf WHERE rf.reply_no=r.reply_no AND prefer=1) r_likes,
			(SELECT COUNT(*) FROM REPLY_PREFER rf WHERE rf.reply_no=r.reply_no AND prefer=0) r_bads,
			
			(SELECT COUNT(*) FROM BOARD_PREFER f WHERE f.board_no=b.board_no AND prefer=1) likes,
			(SELECT COUNT(*) FROM BOARD_PREFER f WHERE f.board_no=b.board_no AND prefer=0) bads
			FROM BOARD b 
			LEFT JOIN REPLY r USING(board_no) 
			WHERE board_no=#{boardNo}
			ORDER BY r.reply_no DESC
			LIMIT #{startRow},#{rows}
	</select>
	
	
	<!--  useGeneratedKeys="true" keyProperty="boardNo" : 파라미터로 넘어온 boardDto에 boardNo가 넘어온다. -->
	<insert id="insert" parameterType="BoardDto" 
	 useGeneratedKeys="true" keyProperty="boardNo">
		INSERT INTO BOARD
			(title,contents,user_id)
			VALUES
			(#{title},#{contents},#{userId})
		<!-- <selectKey>
			SELECT LAST_INSERT_ID()
		</selectKey> -->
	</insert>
	<update id="update" parameterType="BoardDto">
		UPDATE BOARD SET
			title=#{title},
			contents=#{contents}
			WHERE board_no=#{boardNo}	
	</update>
	<update id="viewUpdate" parameterType="int">
		UPDATE BOARD SET
			views=views+1
			WHERE board_no=#{boardNo}
	</update>
	<delete id="delete">
		DELETE FROM BOARD 
			WHERE board_no=#{boardNo}
	</delete>
	
</mapper>